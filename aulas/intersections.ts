// type intersections (sendo representada pelo operador &) pegando todas as propiedades e metodos de uma interface

import { NOMEM } from "dns";

interface Robot{
    material: string;
    fuel: string;
}

interface Human{
    name: string;
    idade: number;
}

type Ciborg = Robot & Human;


/////

interface MyFatchOptions{
    printInput: boolean;
    printTime: boolean;
}

type RequestOptions = MyFatchOptions & RequestInit;

export function myFecth(input: string, options?: MyFatchOptions){
    if(options?.printInput){
        console.log("input", input);
    }
    if (options?.printTime){
        console.log("time", new Date().toLocaleDateString());
    }
    return fetch(input);
}
// fecth serve para fazer requisi√ß√µes para alguma URL

//intersections serve para unir types, ou seja, unir as propriedades de dois tipos em um s√≥.
// no caso acima, RequestOptions tem todas as propriedades de MyFatchOptions e RequestInit (que √© um type do pr√≥prio JS)







//exercicios do chatgpt abaixo:
type carro = {
    marca: string;
    modelo: string;
}

type motor = {
    potencia:number;
    combustivel: "gasolina"|"diesel"|"eletrico";
}

type carroComMotor = carro & motor;

const carro1: carroComMotor = {
    marca: "Honda",
    modelo: "Civic",
    potencia: 300,
    combustivel: "gasolina"
}


// ex 2

type Jogador = { nickname: string; nivel: number };
type Inventario = { itens: string[] };

type JogadorCompleto = Jogador & Inventario;

const jogador1: JogadorCompleto = {
    nickname:"Junin",
    nivel: 100,
    itens: ["po√ßao magica", "espada de fogo", "cora√ß√£o do dragao celestial"]
}



//üìù Exerc√≠cios sobre Intersections
//Exerc√≠cio 1 ‚Äì Mago Guerreiro
//Crie:
//Mago ‚Üí { mana: number; magia: string }
//Guerreiro ‚Üí { forca: number; arma: string }
//Depois, crie um tipo MagoGuerreiro que seja a interse√ß√£o dos dois.
//üëâ Instancie um objeto v√°lido (um personagem h√≠brido).

interface Mago {
    mana: number;
    magia: string;
}

interface Guerreiro {
    forca: number;
    arma: string;
}

type MagoGuerreiro = Mago & Guerreiro;

const MagoGuerreiro1: MagoGuerreiro = {
    mana: 300,
    magia: "criador dos ceus oculares, abram-se os olhos do universo",
    forca: 1000,
    arma: "espada do vazio absoluto"
}

//Exerc√≠cio 2 ‚Äì Produto com desconto
//Crie:
//Produto ‚Üí { nome: string; preco: number }
//Desconto ‚Üí { percentual: number }
//Depois, crie um ProdutoComDesconto e instancie um objeto v√°lido.

type PRODUTO = {
    nome: string;
    preco: number;
}

type desconto = {
    percentual: number;
}

type produtoComDesconto = PRODUTO & desconto;

const produto0:produtoComDesconto = {
    nome: "notebook",
    preco: 5000,
    percentual: 30
}

//Exerc√≠cio 3 ‚Äì Conflito de tipos
//Dado:
type A = { ativo: boolean };
type B = { ativo: "sim" | "n√£o" };
type C = A & B;
//üëâ O que acontece com C? Ele √© v√°lido? Por qu√™?

//Nao C nao √© valido, pois a propriedade "ativo" tem tipos conflitantes. Em A, "ativo" √© um booleano (true ou false), enquanto em B, "ativo" √© uma string que pode ser "sim" ou "n√£o". Como resultado, n√£o h√° um valor que possa satisfazer ambas as defini√ß√µes ao mesmo tempo, tornando a interse√ß√£o inv√°lida.

//Crie:
//Usuario ‚Üí { id: number; nome: string }
//Funcionario ‚Üí { cargo: string; salario: number }
//Cliente ‚Üí { pontosFidelidade: number }
//Depois:
//Crie um tipo FuncionarioCliente que seja a interse√ß√£o de Usuario, Funcionario e Cliente.
//Instancie um objeto v√°lido desse tipo.

type usuario = {
    id: number,
    nome: string,

}
type funcionario = {
    cargo: string,
    salario: number,
}
type cliente = {
    pontosFidelidade: number,
}
type FuncionarioCliente = usuario & funcionario & cliente;

const funcionarioCliente1: FuncionarioCliente = {
    id: 1,
    nome: "Lucas",
    cargo: "Gerente",
    salario: 2000,
    pontosFidelidade: 1500
}

//Exerc√≠cio 5 ‚Äì Intersection + Union
//Dado:
type Video = { tipo: "video"; duracao: number };
type Imagem = { tipo: "imagem"; resolucao: string };
type Conteudo = Video | Imagem;
type Compartilhavel = { compartilhar: () => void };
type ConteudoCompartilhavel = Conteudo & Compartilhavel;
//üëâ Explique o que acontece quando criamos um objeto de ConteudoCompartilhavel.
//Ele pode ser video, imagem ou os dois?

//Um objeto desse tipo so pode ou ser video ou imagem, pois o tipo Conteudo √© uma uni√£o (union) de Video e Imagem. Portanto, um objeto de ConteudoCompartilhavel deve ter as propriedades de Compartilhavel (ou seja, o m√©todo compartilhar) e as propriedades de um dos tipos em Conteudo (ou seja, as propriedades de Video ou as propriedades de Imagem). No entanto, ele n√£o pode ter propriedades de ambos os tipos ao mesmo tempo, pois isso violaria a defini√ß√£o de uni√£o.

//Exerc√≠cio 6 ‚Äì Avan√ßado: Reutilizando intersections
//Crie:
//Endereco ‚Üí { rua: string; cidade: string }
//Contato ‚Üí { telefone: string; email: string }
//Pessoa ‚Üí { nome: string; idade: number }
//Agora crie um tipo PessoaCompleta que seja a interse√ß√£o dos tr√™s (Endereco & Contato & Pessoa) e instancie um objeto v√°lido.

type endereco = {
    rua: string,
    cidade: string,
}
type contato = {
    telefone: string,
    email: string,
}
type pessoa = {
    nome: string,
    idade: number,
}

type pessoaCompleta = endereco & contato & pessoa;

const pessoa1: pessoaCompleta = {
    rua:  "Rua das flores",
    cidade:  "S√£o Paulo",
    telefone:  "123456789",
    email:  "teste1@euacerteigpt.com",
    nome:  "Ana",
    idade:  28,
}

//3. Diferen√ßa resumida
//Estilo	Exemplo	Onde usar normalmente
//camelCase	 | idadeDoUsuario |	vari√°veis, fun√ß√µes, objetos
//PascalCase |	PessoaCompleta |	classes, interfaces, types, enums